/**
 * 	Description	: Gradle build file
 * 	Author		: Sanjeev
 */

buildscript {
	repositories {
		mavenCentral()
	}
}

plugins {
	id "org.springdoc.openapi-gradle-plugin" version "1.3.4"
	//id "com.apollographql.apollo3" version "3.7.4"
	id "com.diffplug.spotless" version "6.15.0"
	id "com.graphql_java_generator.graphql-gradle-plugin" version "${graphQLPluginVersion}"
}

apply plugin: 'application'
apply plugin: 'groovy'

mainClassName = 'sanrocks.tradingbot.TradingBotServiceSelfHostApp'
version = '1.0'

repositories {
	mavenCentral()
}

sourceCompatibility = 11
targetCompatibility = 11

configurations {
	testCompile
}

dependencies {

	//implementation("com.apollographql.apollo3:apollo-runtime:3.7.4")
	//implementation "com.graphql-java-generator:graphql-java-client-runtime:${graphQLPluginVersion}"

	implementation "org.springframework.boot:spring-boot-starter-web:$springboot"
	implementation 'org.springframework:spring-websocket:5.3.20'
	implementation 'org.springframework:spring-messaging:5.3.20'

	implementation 'org.json:json:20220320'
	implementation 'com.google.code.gson:gson:2.9.0'
	implementation "com.fasterxml.jackson.core:jackson-databind:$jackson"
	implementation "com.fasterxml.jackson.core:jackson-annotations:$jackson"
	implementation "com.fasterxml.jackson.core:jackson-core:$jackson"

	implementation 'org.springdoc:springdoc-openapi-ui:1.6.9';

	implementation 'commons-io:commons-io:2.11.0'
	implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'


	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb:2.7.0'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive:2.7.0'
	implementation 'org.springframework.boot:spring-boot-starter-webflux:2.7.0'
	implementation group: 'org.aspectj', name: 'aspectjweaver', version: '1.6.10'
	//implementation group: 'io.netty', name: 'netty-resolver-dns-native-macos', version: '4.1.87.Final'

	//runtimeOnly("io.netty:netty-resolver-dns-native-macos:4.1.87.Final:osx-x86_64")
	implementation group: 'io.netty', name: 'netty-resolver-dns-native-macos', version: '4.1.87.Final', classifier: 'osx-aarch_64'

	//implementation 'org.springframework.data:spring-data-elasticsearch:4.0.0.RELEASE'

	implementation 'org.jeasy:easy-rules-core:4.1.0'
	implementation 'org.jeasy:easy-rules-support:4.1.0'
	testImplementation 'org.jeasy:easy-random-core:5.0.0'

	implementation 'com.graphql-java:graphql-java-tools:5.2.4'
	implementation 'com.graphql-java:graphql-spring-boot-starter:5.0.2'

	compileOnly "org.projectlombok:lombok:$lombok"
	annotationProcessor "org.projectlombok:lombok:$lombok"
	testCompileOnly "org.projectlombok:lombok:$lombok"
	testAnnotationProcessor "org.projectlombok:lombok:$lombok"

	testImplementation 'junit:junit:4.13.2'
	testImplementation "org.jmockit:jmockit:1.49"
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
	testImplementation "org.springframework.boot:spring-boot-starter-test:$springboot"
}

test {
	useJUnitPlatform()
	maxParallelForks = Runtime.runtime.availableProcessors()
	testLogging {
		events "passed", "skipped", "failed"
	}
}

openApi {
	apiDocsUrl.set("http://localhost:1000/trading-bot/v3/api-docs")
}

/**
 apollo {
 service("trading-bot") {
 setPackageName("com.sanrocks.graphql")
 }
 }
 */

spotless {
	java {
		importOrder()
		removeUnusedImports()
		googleJavaFormat('1.15.0').aosp().reflowLongStrings()
		formatAnnotations()
	}

	json {
		target 'src/**/*.json'
		gson()
				.indentWithSpaces(2) // optional: specify the number of spaces to use
				.sortByKeys()        // optional: sort JSON by its keys
				.escapeHtml()        // optional: escape HTML in values
				.version('2.8.1')    // optional: specify version
	}
}

/*
 generateClientCode {
 dependsOn generateGraphQLSchema
 packageName "com.tradingbot.graphql.generated"
 schemaFileFolder "build/generated/resources/schema"
 schemaFilePattern "*.graphqls"
 }
 **/

generateGraphQLSchema {
	dependsOn clean
	schemaFileFolder "src/main/resources/graphql"
	schemaFilePattern "*.graphqls"
	targetFolder "build/generated/resources/schema"
	targetSchemaFileName "trading-bot-schema.graphqls"
}

generatePojo {
	dependsOn generateGraphQLSchema
	packageName "com.tradingbot.graphql.generated"
	schemaFileFolder "build/generated/resources/schema"
	schemaFilePattern "*.graphqls"
}

compileJava.dependsOn spotlessApply
